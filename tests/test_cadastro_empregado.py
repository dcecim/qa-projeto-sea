import pytest
from playwright.sync_api import Page, TimeoutError
import os

# URL da aplica√ß√£o
APP_URL = "http://analista-teste.seatecnologia.com.br/"

# Dados de teste para o fluxo (usaremos um dado √∫nico por teste para clareza)
TEST_EMPLOYEE_DATA = {
    "nome": "Jo√£o Silva Teste Autom", # Nome √∫nico para este teste
    "cpf": "999.888.777-66",         # CPF √∫nico
    "rg": "11.111.111-1",
    "cargo": "Cargo 01", 
    "data_nascimento": "1990-05-15",
    "sexo": "masculino",
    "epi": "nao",
    "atividade": "",
    "ca_number": ""
}

# --- Fun√ß√µes Auxiliares Comuns ---

def take_screenshot(page: Page, step_name: str, dados_empregado: dict = None):
    """
    Captura uma screenshot da p√°gina atual no diret√≥rio de screenshots.
    Garante que o diret√≥rio exista.
    :param dados_empregado: Opcional, dicion√°rio com 'nome' e 'cpf' para sufixo do nome do arquivo.
    """
    screenshots_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "screenshots")
    if not os.path.exists(screenshots_dir):
        os.makedirs(screenshots_dir)
    
    sufixo_nome = ""
    if dados_empregado and "nome" in dados_empregado and "cpf" in dados_empregado:
        nome_limpo = dados_empregado["nome"].replace(' ', '_')
        cpf_limpo = dados_empregado["cpf"].replace('.', '').replace('-', '')
        sufixo_nome = f"_{nome_limpo}_{cpf_limpo}"
    
    filename = f"{step_name}{sufixo_nome}.png"
    screenshot_path = os.path.join(screenshots_dir, filename)
    page.screenshot(path=screenshot_path)
    print(f"üì∏ Screenshot salva: {screenshot_path}")


def selecionar_dropdown_por_label(page: Page, label_text: str, valor: str):
    print(f"DEBUG: Abrindo dropdown para '{label_text}' com valor '{valor}'")
    dropdown_input_locator = page.locator(f'div.c-hJlbiD:has(label:has-text("{label_text}")) .ant-select-selector')
    
    dropdown_input_locator.wait_for(state="visible", timeout=10000)
    dropdown_input_locator.click()
    
    option_content_locator = page.locator(f'div.ant-select-item-option-content:has-text("{valor}")')
    
    option_content_locator.wait_for(state="visible", timeout=20000)
    print(f"DEBUG: Item '{valor}' encontrado e vis√≠vel. Clicando...")
    option_content_locator.click()
    
    selected_value_span = page.locator(f'div.c-hJlbiD:has(label:has-text("{label_text}")) span.ant-select-selection-item[title="{valor}"]')
    selected_value_span.wait_for(state="visible", timeout=10000)
    print(f"DEBUG: Sele√ß√£o de '{valor}' confirmada para '{label_text}'.")


def selecionar_sexo_externo(page: Page, sexo: str):
    selector = f'input.ant-radio-input[value="{sexo.lower()}"]'
    page.locator(selector).wait_for(state="visible", timeout=10000)
    page.locator(selector).click()

def incluir_cadastro_externo(page: Page, dados: dict):
    print(f"Tentando incluir cadastro: {dados['nome']} (CPF: {dados['cpf']})")
    
    page.locator('button:has-text("+ Adicionar Funcion√°rio")').wait_for(state="visible", timeout=10000)
    take_screenshot(page, "01_antes_clicar_adicionar_funcionario", dados_empregado=dados)
    page.locator('button:has-text("+ Adicionar Funcion√°rio")').click()
    
    page.wait_for_selector('input[name="name"]', timeout=10000) 
    take_screenshot(page, "02_apos_abrir_formulario_cadastro", dados_empregado=dados)
    
    page.fill('input[name="name"]', dados["nome"])
    page.fill('input[name="cpf"]', dados["cpf"])
    page.fill('input[name="rg"]', dados["rg"])

    page.fill('input[name="birthDay"]', dados["data_nascimento"])

    selecionar_dropdown_por_label(page, "Cargo", dados["cargo"])

    selecionar_sexo_externo(page, dados["sexo"])

    checkbox_epi_nao_selector = 'label.ant-checkbox-wrapper:has-text("O trabalhador n√£o usa EPI.") input.ant-checkbox-input'
    
    if dados["epi"].lower() == "nao":
        if not page.locator(checkbox_epi_nao_selector).is_checked():
            page.locator(checkbox_epi_nao_selector).click()
    else: 
        if page.locator(checkbox_epi_nao_selector).is_checked():
            page.locator(checkbox_epi_nao_selector).click()
        
        selecionar_dropdown_por_label(page, "Selecione a atividade:", dados.get("atividade", "Ativid 01"))
        selecionar_dropdown_por_label(page, "Selecione o EPI:", dados.get("epi_tipo", "Capacete de seguran√ßa"))
        page.fill('input[name="caNumber"]', dados.get("ca_number", "12345")) 

    take_screenshot(page, "03_formulario_cadastro_preenchido", dados_empregado=dados)
    page.locator('button.save[type="submit"]:has-text("Salvar")').click()
    page.wait_for_selector('button.save[type="submit"]', state="hidden", timeout=10000) 
    print(f"‚úÖ Cadastro inclu√≠do: {dados['nome']}")
    # Adiciona o empregado √† lista global para limpeza
    pytest.global_data_for_cleanup.append(dados) 


# Fun√ß√£o de exclus√£o para limpeza, independente dos resultados do teste.
# Esta fun√ß√£o ser√° chamada pela fixture de teardown no conftest.py
def limpar_cadastro_final_conftest(page: Page, dados_empregado: dict):
    nome_empregado = dados_empregado["nome"]
    cpf_empregado = dados_empregado["cpf"]

    print(f"INFO: [LIMPEZA] Tentando limpar o cadastro de '{nome_empregado}' (CPF: {cpf_empregado})...")
    try:
        page.goto(APP_URL) # Recarrega para ter certeza que est√° na p√°gina principal
        page.wait_for_load_state("networkidle")
        
        # Seletor para encontrar o registro √∫nico pelo nome e CPF
        empregado_locator_unico = page.locator(
            f'div.c-bXqUbA:has-text("{nome_empregado}"):has(div.c-iYbcAK:has-text("{cpf_empregado}"))'
        ).first 

        # Espera e clica nos dots do registro
        dots_locator_limpeza = empregado_locator_unico.locator('div.c-jyZWAy')
        
        dots_locator_limpeza.wait_for(state="visible", timeout=5000) 
        dots_locator_limpeza.click()
        
        # Espera e clica no bot√£o Excluir
        page.locator('button:has-text("Excluir")').wait_for(state="visible", timeout=5000)
        page.locator('button:has-text("Excluir")').click()
        
        # Espera e clica no bot√£o Confirmar
        page.locator('button:has-text("Confirmar")').wait_for(state="visible", timeout=5000)
        page.locator('button:has-text("Confirmar")').click()
        
        # Espera que o registro desapare√ßa da lista
        empregado_locator_unico.wait_for(state="detached", timeout=10000)
        print(f"‚úÖ [LIMPEZA] Cadastro '{nome_empregado}' (CPF: {cpf_empregado}) exclu√≠do com sucesso.")
    except Exception as e:
        print(f"AVISO: [LIMPEZA] Falha ao excluir o cadastro '{nome_empregado}' (CPF: {cpf_empregado}): {e}. Pode ser necess√°rio excluir manualmente.")
        # take_screenshot(page, f"LIMPEZA_FALHA_{nome_empregado.replace(' ', '_')}_{cpf_empregado.replace('.', '').replace('-', '')}") # N√£o tira screenshot aqui para n√£o gerar muitos em caso de falha de limpeza

# --- Classes de Teste ---

class TestFuncionaisCadastro:
    """
    Testes funcionais para o fluxo de cadastro, focando na inclus√£o e nas falhas de visibilidade/intera√ß√£o.
    """
    @pytest.fixture(scope="function", autouse=False) # N√£o autouse, pois queremos controlar a cria√ß√£o do empregado
    def employee_data_for_test(self):
        """
        Fixture para fornecer os dados de um empregado para o teste atual.
        """
        return TEST_EMPLOYEE_DATA.copy() # Retorna uma c√≥pia para n√£o alterar o original entre testes

    def test_01_inclusao_cadastro_empregado(self, page: Page, employee_data_for_test: dict):
        """
        Cen√°rio: Verificar se o cadastro de um novo empregado pode ser inclu√≠do com sucesso.
        """
        print("\n--- TESTE 01: Inclus√£o de Cadastro de Empregado ---")
        page.goto(APP_URL)
        page.wait_for_load_state("networkidle")
        take_screenshot(page, "00_pagina_inicial_limpa")
        
        incluir_cadastro_externo(page, employee_data_for_test)

        # Esta asser√ß√£o valida APENAS que o formul√°rio de cadastro sumiu e a inclus√£o l√≥gica ocorreu.
        # A valida√ß√£o da visibilidade na lista √© feita no pr√≥ximo teste.
        assert page.locator('button.save[type="submit"]:has-text("Salvar")').is_hidden(), \
            "Formul√°rio de cadastro ainda vis√≠vel ap√≥s tentar salvar."
        
        print(f"‚úÖ TESTE 01 CONCLU√çDO: Cadastro de '{employee_data_for_test['nome']}' (CPF: {employee_data_for_test['cpf']}) foi inclu√≠do com sucesso na aplica√ß√£o.")


    def test_02_consulta_registro_nao_visivel_apos_inclusao_e_refresh(self, page: Page, employee_data_for_test: dict):
        """
        Cen√°rio: Validar a visibilidade do registro rec√©m-inclu√≠do na lista
        (problema de persist√™ncia/sincroniza√ß√£o/pagina√ß√£o).
        """
        print("\n--- TESTE 02: Consulta de Registro - N√£o Vis√≠vel Ap√≥s Inclus√£o e Refresh ---")
        # Pr√©-condi√ß√£o: O cadastro j√° deve existir (assumimos que test_01 o criou).
        # Para garantir, o ideal seria criar o dado via API ou em um setup espec√≠fico se este teste pudesse rodar isolado.
        # Como estamos num fluxo sequencial por enquanto, dependemos do teste anterior.
        
        page.goto(APP_URL) # Garante que estamos na p√°gina principal com a lista
        page.wait_for_load_state("networkidle")
        take_screenshot(page, "04_pagina_principal_apos_inclusao_teste_01", dados_empregado=employee_data_for_test)

        nome_empregado = employee_data_for_test["nome"]
        cpf_empregado = employee_data_for_test["cpf"]
        
        # Seletor AGORA COMBINA NOME E CPF para ser √∫nico e evitar "strict mode violation"
        # Usamos .first para pegar o primeiro que Playwright encontrar, caso haja m√∫ltiplos.
        empregado_locator_unico = page.locator(
            f'div.c-bXqUbA:has-text("{nome_empregado}"):has(div.c-iYbcAK:has-text("{cpf_empregado}"))'
        ).first 

        # Passo 1: Tentar encontrar o empregado rec√©m-inclu√≠do IMEDIATAMENTE (sem refresh)
        print(f"DEBUG: Tentando encontrar '{nome_empregado}' (CPF: {cpf_empregado}) sem refresh (expectativa: N√ÉO vis√≠vel)...")
        encontrado_sem_refresh = False
        try:
            empregado_locator_unico.wait_for(state="visible", timeout=5000)
            encontrado_sem_refresh = True
            print(f"AVISO: O empregado '{nome_empregado}' (CPF: {cpf_empregado}) foi encontrado imediatamente ap√≥s a inclus√£o. Isso diverge do esperado de n√£o-visualiza√ß√£o sem refresh.")
            take_screenshot(page, f"05_ENCONTRADO_IMEDIATAMENTE", dados_empregado=employee_data_for_test)
        except TimeoutError:
            print(f"INFO: Empregado '{nome_empregado}' (CPF: {cpf_empregado}) N√ÉO encontrado imediatamente. Comportamento esperado. Prosseguindo para refresh...")
            take_screenshot(page, f"05_NAO_ENCONTRADO_IMEDIATAMENTE", dados_empregado=employee_data_for_test)

        # Passo 2: Fazer refresh da p√°gina
        print("DEBUG: Realizando refresh da p√°gina...")
        page.reload(wait_until="networkidle")
        print("DEBUG: P√°gina recarregada.")
        take_screenshot(page, "06_pagina_principal_apos_refresh", dados_empregado=employee_data_for_test)
        
        # Passo 3: Tentar encontrar o empregado ap√≥s o refresh (sem scroll)
        print(f"DEBUG: Tentando encontrar '{nome_empregado}' (CPF: {cpf_empregado}) ap√≥s refresh (expectativa: N√ÉO vis√≠vel, por falta de pagina√ß√£o)...")
        encontrado_apos_refresh = False
        try:
            empregado_locator_unico.wait_for(state="visible", timeout=10000)
            encontrado_apos_refresh = True
            print(f"AVISO: Empregado '{nome_empregado}' (CPF: {cpf_empregado}) encontrado ap√≥s refresh (sem scroll). Isso diverge do esperado de pagina√ß√£o ausente.")
            take_screenshot(page, f"07_ENCONTRADO_APOS_REFRESH_SEM_SCROLL", dados_empregado=employee_data_for_test)
        except TimeoutError:
            print(f"INFO: Empregado '{nome_empregado}' (CPF: {cpf_empregado}) AINDA N√ÉO encontrado ap√≥s refresh (sem scroll). Comportamento esperado. Prosseguindo para scroll...")
            take_screenshot(page, f"07_NAO_ENCONTRADO_APOS_REFRESH_SEM_SCROLL", dados_empregado=employee_data_for_test)

        # Passo 4: Tentar rolar a p√°gina para baixo e verificar novamente
        print("DEBUG: Tentando rolar a p√°gina para baixo para verificar se o registro aparece...")
        page.mouse.wheel(0, 10000) # Rola 10000 pixels para baixo. Ajuste se necess√°rio.
        page.wait_for_timeout(2000) # Pequena pausa para a rolagem e renderiza√ß√£o
        take_screenshot(page, f"08_pagina_principal_apos_scroll", dados_empregado=employee_data_for_test)

        encontrado_apos_scroll = False
        try:
            empregado_locator_unico.wait_for(state="visible", timeout=10000)
            encontrado_apos_scroll = True
            print(f"AVISO: Empregado '{nome_empregado}' (CPF: {cpf_empregado}) encontrado ap√≥s scroll. Isso indica falta de pagina√ß√£o, mas o registro foi encontrado.")
            take_screenshot(page, f"09_ENCONTRADO_APOS_SCROLL", dados_empregado=employee_data_for_test)
        except TimeoutError:
            print(f"INFO: Empregado '{nome_empregado}' (CPF: {cpf_empregado}) AINDA N√ÉO encontrado AP√ìS SCROLL. Isso confirma o defeito de visualiza√ß√£o/pagina√ß√£o.")
            take_screenshot(page, f"09_NAO_ENCONTRADO_APOS_SCROLL", dados_empregado=employee_data_for_test)

        # Passo 5: Falhar o teste com base nas observa√ß√µes do defeito de visualiza√ß√£o/pagina√ß√£o
        # Se a expectativa √© que ele NUNCA seja vis√≠vel sem pagina√ß√£o/scroll e ele n√£o foi encontrado nem com scroll
        if not encontrado_apos_scroll:
            pytest.fail(
                f"FALHA CR√çTICA: O cadastro de '{nome_empregado}' (CPF: {cpf_empregado}) N√ÉO √â VISUALIZADO na lista "
                f"mesmo ap√≥s inclus√£o, refresh E rolagem da p√°gina. Isso indica um defeito grave de persist√™ncia, "
                f"sincroniza√ß√£o de dados E/OU aus√™ncia de pagina√ß√£o/scroll adequado. "
                f"Verifique as screenshots '05_NAO_ENCONTRADO_IMEDIATAMENTE', '07_NAO_ENCONTRADO_APOS_REFRESH_SEM_SCROLL' e '09_NAO_ENCONTRADO_APOS_SCROLL'."
            )
        # Se ele s√≥ foi encontrado ap√≥s o scroll (o que voc√™ descreveu como um defeito)
        elif not encontrado_sem_refresh and encontrado_apos_scroll:
            pytest.fail(
                f"FALHA: O cadastro de '{nome_empregado}' (CPF: {cpf_empregado}) s√≥ √© vis√≠vel ap√≥s rolagem da p√°gina. "
                f"Isso evidencia a falta de pagina√ß√£o autom√°tica, comprometendo a usabilidade e visibilidade dos dados."
            )
        elif encontrado_sem_refresh:
            pytest.fail(
                f"FALHA (DIVERG√äNCIA): O cadastro de '{nome_empregado}' (CPF: {cpf_empregado}) foi encontrado imediatamente, "
                f"divergindo da expectativa de n√£o-visualiza√ß√£o sem refresh. "
                f"Verifique a screenshot '05_ENCONTRADO_IMEDIATAMENTE'."
            )


    def test_03_tentativa_alteracao_e_exclusao_menu_ausente(self, page: Page, employee_data_for_test: dict):
        """
        Cen√°rio: Tentar acessar as op√ß√µes de altera√ß√£o/exclus√£o via menu '...'
        e reportar a n√£o-implementa√ß√£o/aus√™ncia do menu.
        """
        print("\n--- TESTE 03: Tentativa de Altera√ß√£o/Exclus√£o - Menu Ausente ---")
        # Pr√©-condi√ß√£o: O cadastro j√° deve existir (criado por test_01).
        # √â poss√≠vel que este teste falhe se o registro n√£o for encontrado ou
        # se o menu de dots estiver sob algum problema de visibilidade/intera√ß√£o.
        
        page.goto(APP_URL) # Garante que estamos na p√°gina principal com a lista
        page.wait_for_load_state("networkidle")
        
        nome_empregado = employee_data_for_test["nome"]
        cpf_empregado = employee_data_for_test["cpf"]

        # Seletor para encontrar o registro √∫nico pelo nome e CPF
        # Usamos .first para pegar o primeiro, caso haja m√∫ltiplos.
        empregado_locator_unico = page.locator(
            f'div.c-bXqUbA:has-text("{nome_empregado}"):has(div.c-iYbcAK:has-text("{cpf_empregado}"))'
        ).first
        
        # Tenta rolar para o elemento, caso ele esteja fora da viewport (se o teste anterior n√£o fez isso ou falhou)
        try:
            empregado_locator_unico.scroll_into_view_if_needed(timeout=10000)
            print(f"DEBUG: Rolou a tela para '{nome_empregado}' (CPF: {cpf_empregado}) para tentar visualiz√°-lo.")
        except TimeoutError:
            print(f"AVISO: N√£o foi poss√≠vel rolar a tela at√© '{nome_empregado}' (CPF: {cpf_empregado}) para tentar acessar o menu. Pode n√£o estar vis√≠vel.")
            take_screenshot(page, f"10_NAO_VISIVEL_PARA_MENU_DOTS", dados_empregado=employee_data_for_test)
            pytest.fail(f"FALHA: Empregado '{nome_empregado}' n√£o vis√≠vel para interagir com o menu '...'. "
                       f"Requisito: Tentar altera√ß√£o/exclus√£o. Pode ser um desdobramento do problema de visualiza√ß√£o.")
        
        take_screenshot(page, f"10_antes_clicar_dots", dados_empregado=employee_data_for_test)
        
        # Espera e clica nos dots do registro
        dots_locator = empregado_locator_unico.locator('div.c-jyZWAy') # Selector para o div que cont√©m a imagem dos dots
        
        dots_locator.wait_for(state="visible", timeout=5000) 
        dots_locator.click()

        # Tenta esperar que o bot√£o 'Editar' ou 'Excluir' apare√ßa no menu
        menu_apareceu = False
        try:
            page.locator('button:has-text("Editar")').wait_for(state="visible", timeout=5000)
            menu_apareceu = True
            print(f"AVISO: Menu 'Alterar/Excluir' APARECEU para {nome_empregado}. Isso difere do esperado (n√£o implementa√ß√£o no prot√≥tipo).")
            take_screenshot(page, f"11_MENU_ALTERAR_EXCLUIR_APARECEU", dados_empregado=employee_data_for_test)
            
            # Se o menu apareceu e a expectativa √© que n√£o apare√ßa, o teste falha aqui.
            pytest.fail(
                f"FALHA: O menu 'Alterar/Excluir' APARECEU para '{nome_empregado}' (CPF: {cpf_empregado}), "
                f"contrariando a observa√ß√£o de n√£o-implementa√ß√£o no prot√≥tipo. "
                f"Verifique a screenshot '11_MENU_ALTERAR_EXCLUIR_APARECEU...'. "
                f"Se a funcionalidade foi implementada, o teste precisa ser ajustado."
            )
        except TimeoutError:
            print(f"INFO: Menu 'Alterar/Excluir' N√ÉO APARECEU para {nome_empregado} ap√≥s 5 segundos. Comportamento esperado (n√£o implementa√ß√£o).")
            take_screenshot(page, f"11_NAO_IMPLEMENTADO_Menu_Alterar_Excluir", dados_empregado=employee_data_for_test)
            # Falha o teste intencionalmente para reportar o bug de n√£o-implementa√ß√£o do menu
            pytest.fail(
                f"FALHA: A funcionalidade de 'Alterar/Excluir' n√£o est√° implementada. "
                f"O menu n√£o apareceu ao clicar nos '...' para o funcion√°rio '{nome_empregado}' (CPF: {cpf_empregado}). "
                f"Verifique a screenshot '11_NAO_IMPLEMENTADO_Menu_Alterar_Excluir...'. "
                f"Este √© um defeito de funcionalidade conforme o prot√≥tipo."
            )

