import os
import pytest
from playwright.sync_api import Page, sync_playwright

# URL da aplica√ß√£o
APP_URL = "http://analista-teste.seatecnologia.com.br/"

# Diret√≥rio para salvar screenshots
SCREENSHOTS_DIR = "C:/Temp/qa-projeto-sea/tests/screenshots/"

# Certifique-se de que o diret√≥rio para screenshots existe
os.makedirs(SCREENSHOTS_DIR, exist_ok=True)

class TestConformidade:
    """
    Testes automatizados para verificar a conformidade da aplica√ß√£o com o prot√≥tipo.
    """

    @pytest.fixture(autouse=True)
    def setup(self, page: Page):
        """Configura√ß√£o inicial para cada teste."""
        page.goto(APP_URL)
        page.wait_for_load_state("networkidle")

    def take_screenshot(self, page: Page, step_name: str):
        """
        Captura uma screenshot da p√°gina atual.
        """
        screenshot_path = os.path.join(SCREENSHOTS_DIR, f"{step_name}.png")
        page.screenshot(path=screenshot_path)
        print(f"üì∏ Screenshot capturada: {screenshot_path}")

    def test_verificacao_fonte(self, page: Page):
        """
        Verifica se a fonte utilizada na aplica√ß√£o corresponde √† especificada no prot√≥tipo.
        """
        self.take_screenshot(page, "antes_verificacao_fonte")
        font_family = page.evaluate("""() => {
            const bodyStyle = window.getComputedStyle(document.body);
            return bodyStyle.fontFamily;
        }""")
        assert "Roboto" in font_family or "Arial" in font_family, f"Fonte incorreta: {font_family}"
        self.take_screenshot(page, "apos_verificacao_fonte")
        print("‚úÖ Fonte verificada com sucesso.")

    def test_verificacao_cores(self, page: Page):
        """
        Verifica se as cores dos elementos principais s√£o id√™nticas √†s do prot√≥tipo.
        """
        self.take_screenshot(page, "antes_verificacao_cores")
        botao_adicionar = page.locator(".c-kUQtTK")
        cor_botao = botao_adicionar.evaluate("el => window.getComputedStyle(el).backgroundColor")
        print(f"Cor do bot√£o '+ Adicionar Funcion√°rio': {cor_botao}")
        assert cor_botao == "rgb(0, 123, 255)", f"Cor do bot√£o '+ Adicionar Funcion√°rio' incorreta: {cor_botao}"
        self.take_screenshot(page, "apos_verificacao_cores")
        print("‚úÖ Cores verificadas com sucesso.")

    def test_presenca_itens_design(self, page: Page):
        """
        Verifica a presen√ßa de todos os itens conforme o design proposto.
        """
        self.take_screenshot(page, "antes_verificacao_itens_design")
        botoes = {
            "+ Adicionar Funcion√°rio": ".c-kUQtTK",
            "Ver apenas ativos": ".isActive",
            "Limpar filtros": ".clear",
            "Pr√≥ximo passo": ".c-iuBfvZ"
        }

        for texto, seletor in botoes.items():
            botao = page.locator(seletor)
            is_visible = botao.is_visible()
            self.take_screenshot(page, f"verificacao_visibilidade_{texto.replace(' ', '_')}")
            assert is_visible, f"Bot√£o '{texto}' n√£o est√° vis√≠vel."
            print(f"‚úÖ Bot√£o '{texto}' encontrado e vis√≠vel.")

        campos_formulario = [
            'input[name="nome"]',
            'input[name="cpf"]',
            'input[name="rg"]',
            'select[name="cargo"]',
            'input[name="epi"]'
        ]

        for campo in campos_formulario:
            elemento = page.locator(campo)
            self.take_screenshot(page, f"verificacao_visibilidade_{campo.replace('[', '').replace(']', '').replace('=', '_')}")
            assert elemento.is_visible(), f"Campo '{campo}' n√£o est√° vis√≠vel."
            print(f"‚úÖ Campo '{campo}' encontrado e vis√≠vel.")

        self.take_screenshot(page, "apos_verificacao_itens_design")
        print("‚úÖ Todos os itens de design est√£o presentes.")